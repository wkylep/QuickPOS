// Generated by CoffeeScript 1.8.0
var Quickpos, p,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Quickpos = (function() {
  function Quickpos(path) {
    this.path = path;
    this.showReceipt = __bind(this.showReceipt, this);
    this.showPayoutAuthed = __bind(this.showPayoutAuthed, this);
    this.showPayout = __bind(this.showPayout, this);
    this.updateCountDrawerTotals = __bind(this.updateCountDrawerTotals, this);
    this.showCountDrawerAuthed = __bind(this.showCountDrawerAuthed, this);
    this.showCountDrawer = __bind(this.showCountDrawer, this);
    this.showVoidAuthed = __bind(this.showVoidAuthed, this);
    this.showVoid = __bind(this.showVoid, this);
    this.showPassword = __bind(this.showPassword, this);
    this.updateTotals = __bind(this.updateTotals, this);
    this.showInvoiceTable = __bind(this.showInvoiceTable, this);
    this.setSidebar = __bind(this.setSidebar, this);
    this.showCashout = __bind(this.showCashout, this);
    this.showCoupons = __bind(this.showCoupons, this);
    this.showServices = __bind(this.showServices, this);
    this.addInvoiceItem = __bind(this.addInvoiceItem, this);
    this.defaultClose = __bind(this.defaultClose, this);
    this.setActive = __bind(this.setActive, this);
    this.closeActive = __bind(this.closeActive, this);
    this.active = "";
    this.invoice_items = [];
    this.container = "#main_container";
  }

  Quickpos.prototype.getConfig = function() {
    return $.getJSON("" + this.path + "/config").done((function(_this) {
      return function(data) {
        _this.config = data.content;
        return _this.setupNav();
      };
    })(this));
  };

  Quickpos.prototype.closeActive = function() {
    if (this["close" + this.active] != null) {
      return this["close" + this.active]();
    } else {
      return this.defaultClose();
    }
  };

  Quickpos.prototype.setActive = function(name) {
    if (this.active === name || !this.closeActive()) {
      return false;
    }
    this.active = name;
    return true;
  };

  Quickpos.prototype.defaultClose = function() {
    this.active = "";
    $(this.container).empty();
    return true;
  };

  Quickpos.prototype.setContainer = function(val) {
    return $(this.container).html(val);
  };

  Quickpos.prototype.setupNav = function() {
    $("#btnservice").click((function(_this) {
      return function(e) {
        e.preventDefault();
        return _this.showServices();
      };
    })(this));
    $("#btncoupon").click((function(_this) {
      return function(e) {
        e.preventDefault();
        return _this.showCoupons();
      };
    })(this));
    $("#btncashout").click((function(_this) {
      return function(e) {
        e.preventDefault();
        return _this.showCashout();
      };
    })(this));
    $("#menuVoid").click((function(_this) {
      return function(e) {
        e.preventDefault();
        return _this.showVoid();
      };
    })(this));
    $("#menuCountDrawer").click((function(_this) {
      return function(e) {
        e.preventDefault();
        return _this.showCountDrawer();
      };
    })(this));
    $("#menuPayout").click((function(_this) {
      return function(e) {
        e.preventDefault();
        return _this.showPayout();
      };
    })(this));
    this.showServices();
    this.showInvoiceTable(false);
    return $(".navbar-brand").html(this.config.name);
  };

  Quickpos.prototype.addInvoiceItem = function(id, name, retail, type) {
    if (type == null) {
      type = "service";
    }
    this.invoice_items.push({
      id: id,
      name: name,
      retail: retail,
      type: type
    });
    return this.showInvoiceTable();
  };

  Quickpos.prototype.showServices = function() {
    return $.getJSON("" + this.path + "/get_services").done((function(_this) {
      return function(data) {
        _this.setSidebar("Services", data.content);
        return $(".sidebar .nav-sidebar button").click(function(e) {
          var id;
          e.preventDefault();
          id = $(e.currentTarget).attr("data-id");
          return $.getJSON("" + _this.path + "/get_service/" + id).done(function(data) {
            if (data.content.edit === "1") {
              $("#servicemodal .modal-title").html(data.content.name);
              $("#servicemodal #serviceretail").val(Number(data.content.retail).toFixed(2));
              $("#servicemodalbtn").off("click").click(function(e) {
                var comment, retail;
                comment = $("#servicecomment").val();
                retail = $("#serviceretail").val();
                if (isNaN(Number(retail))) {
                  $("#serviceretailgroup").addClass("has-error");
                  return true;
                }
                _this.addInvoiceItem(data.content.id, "" + data.content.name + ": " + comment, Number(retail));
                return $("#servicemodal").modal("hide");
              });
              $("#serviceretailgroup").removeClass("has-error");
              return $("#servicemodal").modal("show");
            } else {
              return _this.addInvoiceItem(data.content.id, data.content.name, Number(data.content.retail));
            }
          });
        });
      };
    })(this));
  };

  Quickpos.prototype.showCoupons = function() {
    return $.getJSON("" + this.path + "/get_coupons").done((function(_this) {
      return function(data) {
        _this.setSidebar("Coupons", data.content);
        return $(".sidebar .nav-sidebar button").click(function(e) {
          var id;
          e.preventDefault();
          id = $(e.currentTarget).attr("data-id");
          return $.getJSON("" + _this.path + "/get_coupon/" + id).done(function(data) {
            return _this.addInvoiceItem(data.content.id, data.content.name, Number(data.content.amount) * -1, "coupon");
          });
        });
      };
    })(this));
  };

  Quickpos.prototype.showCashout = function() {
    return $.getJSON("" + this.path + "/get_payments").done((function(_this) {
      return function(data) {
        _this.setSidebar("Select Tender", data.content);
        return $(".sidebar .nav-sidebar button").click(function(e) {
          var id;
          e.preventDefault();
          id = $(e.currentTarget).attr("data-id");
          return $.post("" + _this.path + "/complete_invoice", {
            payment: id,
            items: JSON.stringify(_this.invoice_items)
          }, null, "json").done(function(recdata) {
            _this.invoice_items = [];
            if (_this.config.showreceipt) {
              return _this.showReceipt(recdata.content);
            } else {
              _this.showServices();
              return _this.showInvoiceTable();
            }
          });
        });
      };
    })(this));
  };

  Quickpos.prototype.setSidebar = function(name, items) {
    var i, sidebar, tpl, _i, _len, _results;
    $(".sidebar h4").html(name);
    sidebar = $(".sidebar .nav-sidebar");
    $(sidebar).empty();
    tpl = Handlebars.compile($("#sidebaritem").html());
    _results = [];
    for (_i = 0, _len = items.length; _i < _len; _i++) {
      i = items[_i];
      _results.push($(sidebar).append(tpl(i)));
    }
    return _results;
  };

  Quickpos.prototype.showInvoiceTable = function(forceRefresh) {
    var index, item, tpl, _i, _len, _ref;
    if (forceRefresh == null) {
      forceRefresh = true;
    }
    if (forceRefresh && this.active === "InvoiceTable") {
      this.closeActive();
    }
    if (!this.setActive("InvoiceTable")) {
      return false;
    }
    this.setContainer(Handlebars.compile($("#invoicetable").html())());
    tpl = Handlebars.compile($("#invoicetableitem").html());
    _ref = this.invoice_items;
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      item = _ref[index];
      $("#itemtable tbody").append(tpl({
        index: index,
        item: item
      }));
    }
    this.updateTotals();
    return $("#itemtable tbody button").click((function(_this) {
      return function(e) {
        index = $(e.currentTarget).attr("data-id");
        _this.invoice_items.splice(index, 1);
        return _this.showInvoiceTable();
      };
    })(this));
  };

  Quickpos.prototype.updateTotals = function() {
    var item, subtotal, tax, _i, _len, _ref;
    subtotal = 0;
    _ref = this.invoice_items;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      subtotal += Number(item.retail);
    }
    tax = subtotal * Number(this.config.tax);
    $("#subtotal").html(subtotal.toFixed(2));
    $("#tax").html(tax.toFixed(2));
    $("#total").html((subtotal + tax).toFixed(2));
    if (subtotal < 0) {
      return $("#error").html("Total can not be less than zero.").removeClass("hidden");
    } else {
      return $("#error").html("").addClass("hidden");
    }
  };

  Quickpos.prototype.showPassword = function(valid, callback) {
    if (valid == null) {
      valid = [];
    }
    $("#passwordmodal").modal("show");
    $("#password").val("");
    return $("#passwordbtn").off("click").click((function(_this) {
      return function(e) {
        var password, v, _i, _len;
        password = $("#password").val();
        for (_i = 0, _len = valid.length; _i < _len; _i++) {
          v = valid[_i];
          if (v === password) {
            $("#passwordmodal").modal("hide");
            if (callback) {
              callback();
            }
          }
          return true;
        }
        return $("#password").val("");
      };
    })(this));
  };

  Quickpos.prototype.showVoid = function() {
    return this.showPassword(this.config.password, this.showVoidAuthed);
  };

  Quickpos.prototype.showVoidAuthed = function() {
    return $.getJSON("" + this.path + "/get_receipt_list").done((function(_this) {
      return function(data) {
        var rec, tpl, _i, _len, _ref;
        $("#voidmodal").modal("show");
        $("#voidmodal .list-group").empty();
        tpl = Handlebars.compile($("#voidmodalitem").html());
        _ref = data.content;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          rec = _ref[_i];
          $("#voidmodal .list-group").append(tpl(rec));
        }
        return $("#voidmodal .list-group a").click(function(e) {
          var id;
          e.preventDefault();
          if ($(e.currentTarget).hasClass("disabled")) {
            return;
          }
          id = $(e.currentTarget).attr("data-id");
          return $.getJSON("" + _this.path + "/void_receipt/" + id).done(function() {
            return $("#voidmodal").modal("hide");
          });
        });
      };
    })(this));
  };

  Quickpos.prototype.showCountDrawer = function() {
    return this.showPassword(this.config.password, this.showCountDrawerAuthed);
  };

  Quickpos.prototype.showCountDrawerAuthed = function() {
    var f, fields, _i, _len;
    $("#countdrawermodal").modal("show");
    fields = ["penny", "nickel", "dime", "quarter", "one", "five", "ten", "twenty", "fifty", "hundred"];
    for (_i = 0, _len = fields.length; _i < _len; _i++) {
      f = fields[_i];
      $("#" + f).off("change").change(this.updateCountDrawerTotals).val("");
    }
    $("#opendrawer").off("click").click((function(_this) {
      return function(e) {
        return $.getJSON("" + _this.path + "/open_cashdrawer");
      };
    })(this));
    $("#printdrawer").off("click").click((function(_this) {
      return function(e) {
        return $.post("" + _this.path + "/print_cashdrawer", $("#cashdrawerform").serialize(), null, "json").done(function(data) {
          return $("#countdrawermodal").modal("hide");
        });
      };
    })(this));
    return this.updateCountDrawerTotals();
  };

  Quickpos.prototype.updateCountDrawerTotals = function() {
    var c, f, fields, total, v;
    total = 0;
    fields = {
      penny: 0.01,
      nickel: 0.05,
      dime: 0.1,
      quarter: 0.25,
      one: 1,
      five: 5,
      ten: 10,
      twenty: 20,
      fifty: 50,
      hundred: 100
    };
    for (f in fields) {
      v = fields[f];
      c = Number($("#" + f).val());
      if (c === 0 || isNaN(c)) {
        $("#" + f + "_count").val("");
      } else {
        total += c * v;
        $("#" + f + "_count").val("$" + ((c * v).toFixed(2)));
      }
    }
    return $("#totaldrawer").val("$" + (total.toFixed(2)));
  };

  Quickpos.prototype.showPayout = function() {
    return this.showPassword(this.config.password, this.showPayoutAuthed);
  };

  Quickpos.prototype.showPayoutAuthed = function() {
    $("#payoutmodal").modal("show");
    $("#payoutdesc,#payoutamount").val("");
    $("#payoutopen").off("click").click((function(_this) {
      return function(e) {
        return $.getJSON("" + _this.path + "/open_cashdrawer");
      };
    })(this));
    return $("#payoutdone").off("click").click((function(_this) {
      return function(e) {
        return $.post("" + _this.path + "/payout", $("#payoutform").serialize(), null, "json").done(function(data) {
          return $("#payoutmodal").modal("hide");
        });
      };
    })(this));
  };

  Quickpos.prototype.showReceipt = function(data) {
    if (!this.setActive("Receipt")) {
      return false;
    }
    $("#main_container,.navbar,.sidebar").addClass("hidden");
    data.config = this.config;
    $("#full_container").removeClass("hidden").html(Handlebars.compile($("#receipt").html())(data));
    $("#printbtn").click((function(_this) {
      return function(e) {
        e.preventDefault();
        return window.print();
      };
    })(this));
    return $("#closebtn").click((function(_this) {
      return function(e) {
        e.preventDefault();
        $("#main_container,.navbar,.sidebar").removeClass("hidden");
        $("#full_container").addClass("hidden").empty();
        _this.showServices();
        return _this.showInvoiceTable();
      };
    })(this));
  };

  return Quickpos;

})();

p = new Quickpos(window.basepath);

$(document).ready(function() {
  Handlebars.registerHelper('formatMoney', function(val) {
    if (val < 0) {
      val = val * -1;
    }
    return "" + (Number(val).toFixed(2));
  });
  Handlebars.registerHelper('formatTax', function(val) {
    return "" + (Number(val * 100).toFixed(2)) + "%";
  });
  Handlebars.registerHelper('isChecked', function(expr) {
    if (Number(expr)) {
      return 'checked';
    } else {
      return '';
    }
  });
  Handlebars.registerHelper('isSelected', function(v1, v2) {
    if (v1 === v2) {
      return 'selected';
    } else {
      return '';
    }
  });
  Handlebars.registerHelper('ifEqOr', function(v1, v2, v3, options) {
    if (v1 === v2 || v1 === v3) {
      return options.fn(this);
    } else {
      return options.inverse(this);
    }
  });
  Handlebars.registerHelper('ifNegative', function(val, options) {
    if (val < 0) {
      return options.fn(this);
    } else {
      return options.inverse(this);
    }
  });
  return p.getConfig();
});
